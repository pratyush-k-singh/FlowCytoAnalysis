# -*- coding: utf-8 -*-
"""Column_Cluster.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PZSdZnky5x5Fs9Rt5Z5Hw7RekpEvEOmp
"""

from google.colab import auth
auth.authenticate_user()

import gspread
from google.auth import default
from googleapiclient.discovery import build

creds, _ = default()
gc = gspread.authorize(creds)
service = build('sheets', 'v4', credentials=creds)

SPREADSHEET_ID = '19dXXXbmNxnN7oyenNe56kwgTR_ix6Q9gHB2UN11vXhs'
SOURCE_SHEET_NAME = 'ClusteredData'
TARGET_SHEET_NAME = 'TriplicateFiles'
COLUMN_TO_CHECK = 'X'  # Column letter to check for the value
VALUE_TO_LOOK_FOR = '3'

# Function to create a new sheet or use existing one
def get_or_create_sheet(service, title):
    # Check if the sheet already exists
    sheet_metadata = service.spreadsheets().get(spreadsheetId=SPREADSHEET_ID).execute()
    sheets = sheet_metadata.get('sheets', '')
    sheet_names = [sheet['properties']['title'] for sheet in sheets]

    if title not in sheet_names:
        body = {
            'requests': [{
                'addSheet': {
                    'properties': {
                        'title': title
                    }
                }
            }]
        }
        service.spreadsheets().batchUpdate(spreadsheetId=SPREADSHEET_ID, body=body).execute()

# Function to find rows with specific value and copy them to a new sheet
def copy_rows_to_new_sheet(service, source_sheet, target_sheet, column, value):
    # Get data from source sheet
    result = service.spreadsheets().values().get(spreadsheetId=SPREADSHEET_ID, range=source_sheet).execute()
    values = result.get('values', [])

    # Filter rows with the specific value
    rows_to_copy = [row for row in values if row and row[ord(column) - ord('A')] == value]

    # Write filtered rows to target sheet
    body = {
        'values': rows_to_copy
    }
    service.spreadsheets().values().update(
        spreadsheetId=SPREADSHEET_ID, range=target_sheet + '!A1', body=body, valueInputOption='RAW'
    ).execute()

# Create a new sheet or use the existing one and copy rows
get_or_create_sheet(service, TARGET_SHEET_NAME)
copy_rows_to_new_sheet(service, SOURCE_SHEET_NAME, TARGET_SHEET_NAME, COLUMN_TO_CHECK, VALUE_TO_LOOK_FOR)