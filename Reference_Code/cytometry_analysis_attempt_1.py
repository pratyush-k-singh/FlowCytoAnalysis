# -*- coding: utf-8 -*-
"""Cytometry_Analysis_Attempt_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AXH_7jkgISQIUqcSnU_V30tlrzcB_qOL
"""

from google.colab import drive
import os
import pandas as pd
from FlowCytometryTools import FCMeasurement
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler

# Mount Google Drive
drive.mount('/content/drive')

# Assuming 'flow_cytometry_folder' is the path to the folder with your .fcs files in Google Drive
input_folder_path = '/content/drive/My Drive/Raw_Flow_Cytometry_Data'
output_folder_path = '/content/drive/My Drive/Analyzed_Flow_Cytometry_Data'

# Ensure the output folder exists
os.makedirs(output_folder_path, exist_ok=True)

def analyze_file(file_path, output_folder):
    # Load the data
    sample = FCMeasurement(ID='TestSample', datafile=file_path)
    data = sample.data
    meta = sample.meta

    # Perform summary statistics and correlation matrix analysis
    summary_stats = data.describe()
    correlation_matrix = data.iloc[:,1:].corr()

    # Define analysis functions
    def plothist(param, output_folder):
        sns.histplot(data[param], kde=True)
        plt.title('Distribution of ' + param)
        plt.xlabel('Value')
        plt.ylabel('Frequency')
        plt.savefig(os.path.join(output_folder, param + '_hist.pdf'))
        plt.close()

    def plotscatter(param1, param2, output_folder):
        sns.scatterplot(x=data[param1], y=data[param2])
        plt.title(param1 + ' vs ' + param2)
        plt.xlabel(param1)
        plt.ylabel(param2)
        plt.savefig(os.path.join(output_folder, param1 + '_vs_' + param2 + '.pdf'))
        plt.close()

    # Replace 'Your_Parameter_Name', 'Parameter1', and 'Parameter2' with actual parameter names
    # Example: plothist('FSC-A', output_folder)
    # Example: plotscatter('FSC-A', 'SSC-A', output_folder)

    # Correlation Matrix
    plt.figure(figsize=(10, 8))
    sns.heatmap(correlation_matrix, annot=True, fmt=".2f")
    plt.title('Correlation Matrix')
    plt.savefig(os.path.join(output_folder, 'correlation_matrix.pdf'))
    plt.close()

    # PCA Analysis
    # Exclude non-numeric columns if necessary
    numeric_columns = data.select_dtypes(include=[np.number]).columns
    data_to_scale = data[numeric_columns]
    scaler = StandardScaler()
    scaled_data = scaler.fit_transform(data_to_scale)
    pca = PCA(n_components=2)
    pca_results = pca.fit_transform(scaled_data)
    plt.scatter(pca_results[:, 0], pca_results[:, 1])
    plt.title('PCA - First Two Principal Components')
    plt.xlabel('Principal Component 1')
    plt.ylabel('Principal Component 2')
    plt.savefig(os.path.join(output_folder, 'PCA.pdf'))
    plt.close()

    return summary_stats, meta

# Iterate over files in the input folder and analyze each file
for file_name in os.listdir(input_folder_path):
    if file_name.endswith('.fcs'):
        file_path = os.path.join(input_folder_path, file_name)
        analyze_file(file_path, output_folder_path)